// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/openstorage/services (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ServiceAddDrive mocks base method
func (m *MockService) ServiceAddDrive(arg0, arg1 string, arg2 bool) (string, error) {
	ret := m.ctrl.Call(m, "ServiceAddDrive", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceAddDrive indicates an expected call of ServiceAddDrive
func (mr *MockServiceMockRecorder) ServiceAddDrive(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAddDrive", reflect.TypeOf((*MockService)(nil).ServiceAddDrive), arg0, arg1, arg2)
}

// ServiceEnterMaintenanceMode mocks base method
func (m *MockService) ServiceEnterMaintenanceMode(arg0 bool) error {
	ret := m.ctrl.Call(m, "ServiceEnterMaintenanceMode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceEnterMaintenanceMode indicates an expected call of ServiceEnterMaintenanceMode
func (mr *MockServiceMockRecorder) ServiceEnterMaintenanceMode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEnterMaintenanceMode", reflect.TypeOf((*MockService)(nil).ServiceEnterMaintenanceMode), arg0)
}

// ServiceExitMaintenanceMode mocks base method
func (m *MockService) ServiceExitMaintenanceMode() error {
	ret := m.ctrl.Call(m, "ServiceExitMaintenanceMode")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceExitMaintenanceMode indicates an expected call of ServiceExitMaintenanceMode
func (mr *MockServiceMockRecorder) ServiceExitMaintenanceMode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceExitMaintenanceMode", reflect.TypeOf((*MockService)(nil).ServiceExitMaintenanceMode))
}

// ServiceRebalancePool mocks base method
func (m *MockService) ServiceRebalancePool(arg0 string, arg1 int) (string, error) {
	ret := m.ctrl.Call(m, "ServiceRebalancePool", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceRebalancePool indicates an expected call of ServiceRebalancePool
func (mr *MockServiceMockRecorder) ServiceRebalancePool(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceRebalancePool", reflect.TypeOf((*MockService)(nil).ServiceRebalancePool), arg0, arg1)
}

// ServiceReplaceDrive mocks base method
func (m *MockService) ServiceReplaceDrive(arg0, arg1, arg2 string) (string, error) {
	ret := m.ctrl.Call(m, "ServiceReplaceDrive", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceReplaceDrive indicates an expected call of ServiceReplaceDrive
func (mr *MockServiceMockRecorder) ServiceReplaceDrive(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceReplaceDrive", reflect.TypeOf((*MockService)(nil).ServiceReplaceDrive), arg0, arg1, arg2)
}
