// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/openstorage/api (interfaces: OpenStorageBucketServer,OpenStorageBucketClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/libopenstorage/openstorage/api"
	grpc "google.golang.org/grpc"
)

// MockOpenStorageBucketServer is a mock of OpenStorageBucketServer interface.
type MockOpenStorageBucketServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageBucketServerMockRecorder
}

// MockOpenStorageBucketServerMockRecorder is the mock recorder for MockOpenStorageBucketServer.
type MockOpenStorageBucketServerMockRecorder struct {
	mock *MockOpenStorageBucketServer
}

// NewMockOpenStorageBucketServer creates a new mock instance.
func NewMockOpenStorageBucketServer(ctrl *gomock.Controller) *MockOpenStorageBucketServer {
	mock := &MockOpenStorageBucketServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageBucketServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageBucketServer) EXPECT() *MockOpenStorageBucketServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOpenStorageBucketServer) Create(arg0 context.Context, arg1 *api.BucketCreateRequest) (*api.BucketCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*api.BucketCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenStorageBucketServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenStorageBucketServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockOpenStorageBucketServer) Delete(arg0 context.Context, arg1 *api.BucketDeleteRequest) (*api.BucketDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*api.BucketDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenStorageBucketServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenStorageBucketServer)(nil).Delete), arg0, arg1)
}

// GrantAccess mocks base method.
func (m *MockOpenStorageBucketServer) GrantAccess(arg0 context.Context, arg1 *api.BucketGrantAccessRequest) (*api.BucketGrantAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccess", arg0, arg1)
	ret0, _ := ret[0].(*api.BucketGrantAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAccess indicates an expected call of GrantAccess.
func (mr *MockOpenStorageBucketServerMockRecorder) GrantAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockOpenStorageBucketServer)(nil).GrantAccess), arg0, arg1)
}

// RevokeAccess mocks base method.
func (m *MockOpenStorageBucketServer) RevokeAccess(arg0 context.Context, arg1 *api.BucketRevokeAccessRequest) (*api.BucketRevokeAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccess", arg0, arg1)
	ret0, _ := ret[0].(*api.BucketRevokeAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccess indicates an expected call of RevokeAccess.
func (mr *MockOpenStorageBucketServerMockRecorder) RevokeAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccess", reflect.TypeOf((*MockOpenStorageBucketServer)(nil).RevokeAccess), arg0, arg1)
}

// MockOpenStorageBucketClient is a mock of OpenStorageBucketClient interface.
type MockOpenStorageBucketClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageBucketClientMockRecorder
}

// MockOpenStorageBucketClientMockRecorder is the mock recorder for MockOpenStorageBucketClient.
type MockOpenStorageBucketClientMockRecorder struct {
	mock *MockOpenStorageBucketClient
}

// NewMockOpenStorageBucketClient creates a new mock instance.
func NewMockOpenStorageBucketClient(ctrl *gomock.Controller) *MockOpenStorageBucketClient {
	mock := &MockOpenStorageBucketClient{ctrl: ctrl}
	mock.recorder = &MockOpenStorageBucketClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageBucketClient) EXPECT() *MockOpenStorageBucketClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOpenStorageBucketClient) Create(arg0 context.Context, arg1 *api.BucketCreateRequest, arg2 ...grpc.CallOption) (*api.BucketCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*api.BucketCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenStorageBucketClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenStorageBucketClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockOpenStorageBucketClient) Delete(arg0 context.Context, arg1 *api.BucketDeleteRequest, arg2 ...grpc.CallOption) (*api.BucketDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*api.BucketDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenStorageBucketClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenStorageBucketClient)(nil).Delete), varargs...)
}

// GrantAccess mocks base method.
func (m *MockOpenStorageBucketClient) GrantAccess(arg0 context.Context, arg1 *api.BucketGrantAccessRequest, arg2 ...grpc.CallOption) (*api.BucketGrantAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantAccess", varargs...)
	ret0, _ := ret[0].(*api.BucketGrantAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAccess indicates an expected call of GrantAccess.
func (mr *MockOpenStorageBucketClientMockRecorder) GrantAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockOpenStorageBucketClient)(nil).GrantAccess), varargs...)
}

// RevokeAccess mocks base method.
func (m *MockOpenStorageBucketClient) RevokeAccess(arg0 context.Context, arg1 *api.BucketRevokeAccessRequest, arg2 ...grpc.CallOption) (*api.BucketRevokeAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAccess", varargs...)
	ret0, _ := ret[0].(*api.BucketRevokeAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccess indicates an expected call of RevokeAccess.
func (mr *MockOpenStorageBucketClientMockRecorder) RevokeAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccess", reflect.TypeOf((*MockOpenStorageBucketClient)(nil).RevokeAccess), varargs...)
}
