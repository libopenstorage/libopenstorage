// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/openstorage/api (interfaces: OpenStorageCloudBackupServer,OpenStorageCloudBackupClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/libopenstorage/openstorage/api"
	grpc "google.golang.org/grpc"
)

// MockOpenStorageCloudBackupServer is a mock of OpenStorageCloudBackupServer interface.
type MockOpenStorageCloudBackupServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageCloudBackupServerMockRecorder
}

// MockOpenStorageCloudBackupServerMockRecorder is the mock recorder for MockOpenStorageCloudBackupServer.
type MockOpenStorageCloudBackupServerMockRecorder struct {
	mock *MockOpenStorageCloudBackupServer
}

// NewMockOpenStorageCloudBackupServer creates a new mock instance.
func NewMockOpenStorageCloudBackupServer(ctrl *gomock.Controller) *MockOpenStorageCloudBackupServer {
	mock := &MockOpenStorageCloudBackupServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageCloudBackupServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageCloudBackupServer) EXPECT() *MockOpenStorageCloudBackupServerMockRecorder {
	return m.recorder
}

// Catalog mocks base method.
func (m *MockOpenStorageCloudBackupServer) Catalog(arg0 context.Context, arg1 *api.SdkCloudBackupCatalogRequest) (*api.SdkCloudBackupCatalogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Catalog", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Catalog indicates an expected call of Catalog.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) Catalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Catalog", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).Catalog), arg0, arg1)
}

// Create mocks base method.
func (m *MockOpenStorageCloudBackupServer) Create(arg0 context.Context, arg1 *api.SdkCloudBackupCreateRequest) (*api.SdkCloudBackupCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockOpenStorageCloudBackupServer) Delete(arg0 context.Context, arg1 *api.SdkCloudBackupDeleteRequest) (*api.SdkCloudBackupDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).Delete), arg0, arg1)
}

// DeleteAll mocks base method.
func (m *MockOpenStorageCloudBackupServer) DeleteAll(arg0 context.Context, arg1 *api.SdkCloudBackupDeleteAllRequest) (*api.SdkCloudBackupDeleteAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupDeleteAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) DeleteAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).DeleteAll), arg0, arg1)
}

// EnumerateWithFilters mocks base method.
func (m *MockOpenStorageCloudBackupServer) EnumerateWithFilters(arg0 context.Context, arg1 *api.SdkCloudBackupEnumerateWithFiltersRequest) (*api.SdkCloudBackupEnumerateWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnumerateWithFilters", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupEnumerateWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumerateWithFilters indicates an expected call of EnumerateWithFilters.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) EnumerateWithFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumerateWithFilters", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).EnumerateWithFilters), arg0, arg1)
}

// GroupCreate mocks base method.
func (m *MockOpenStorageCloudBackupServer) GroupCreate(arg0 context.Context, arg1 *api.SdkCloudBackupGroupCreateRequest) (*api.SdkCloudBackupGroupCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupGroupCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupCreate indicates an expected call of GroupCreate.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) GroupCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).GroupCreate), arg0, arg1)
}

// History mocks base method.
func (m *MockOpenStorageCloudBackupServer) History(arg0 context.Context, arg1 *api.SdkCloudBackupHistoryRequest) (*api.SdkCloudBackupHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) History(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).History), arg0, arg1)
}

// Restore mocks base method.
func (m *MockOpenStorageCloudBackupServer) Restore(arg0 context.Context, arg1 *api.SdkCloudBackupRestoreRequest) (*api.SdkCloudBackupRestoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupRestoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) Restore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).Restore), arg0, arg1)
}

// SchedCreate mocks base method.
func (m *MockOpenStorageCloudBackupServer) SchedCreate(arg0 context.Context, arg1 *api.SdkCloudBackupSchedCreateRequest) (*api.SdkCloudBackupSchedCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedCreate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedCreate indicates an expected call of SchedCreate.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) SchedCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedCreate", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).SchedCreate), arg0, arg1)
}

// SchedDelete mocks base method.
func (m *MockOpenStorageCloudBackupServer) SchedDelete(arg0 context.Context, arg1 *api.SdkCloudBackupSchedDeleteRequest) (*api.SdkCloudBackupSchedDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedDelete", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedDelete indicates an expected call of SchedDelete.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) SchedDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedDelete", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).SchedDelete), arg0, arg1)
}

// SchedEnumerate mocks base method.
func (m *MockOpenStorageCloudBackupServer) SchedEnumerate(arg0 context.Context, arg1 *api.SdkCloudBackupSchedEnumerateRequest) (*api.SdkCloudBackupSchedEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedEnumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedEnumerate indicates an expected call of SchedEnumerate.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) SchedEnumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedEnumerate", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).SchedEnumerate), arg0, arg1)
}

// SchedUpdate mocks base method.
func (m *MockOpenStorageCloudBackupServer) SchedUpdate(arg0 context.Context, arg1 *api.SdkCloudBackupSchedUpdateRequest) (*api.SdkCloudBackupSchedUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedUpdate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedUpdate indicates an expected call of SchedUpdate.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) SchedUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedUpdate", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).SchedUpdate), arg0, arg1)
}

// Size mocks base method.
func (m *MockOpenStorageCloudBackupServer) Size(arg0 context.Context, arg1 *api.SdkCloudBackupSizeRequest) (*api.SdkCloudBackupSizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) Size(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).Size), arg0, arg1)
}

// StateChange mocks base method.
func (m *MockOpenStorageCloudBackupServer) StateChange(arg0 context.Context, arg1 *api.SdkCloudBackupStateChangeRequest) (*api.SdkCloudBackupStateChangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateChange", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupStateChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateChange indicates an expected call of StateChange.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) StateChange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateChange", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).StateChange), arg0, arg1)
}

// Status mocks base method.
func (m *MockOpenStorageCloudBackupServer) Status(arg0 context.Context, arg1 *api.SdkCloudBackupStatusRequest) (*api.SdkCloudBackupStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkCloudBackupStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockOpenStorageCloudBackupServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockOpenStorageCloudBackupServer)(nil).Status), arg0, arg1)
}

// MockOpenStorageCloudBackupClient is a mock of OpenStorageCloudBackupClient interface.
type MockOpenStorageCloudBackupClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageCloudBackupClientMockRecorder
}

// MockOpenStorageCloudBackupClientMockRecorder is the mock recorder for MockOpenStorageCloudBackupClient.
type MockOpenStorageCloudBackupClientMockRecorder struct {
	mock *MockOpenStorageCloudBackupClient
}

// NewMockOpenStorageCloudBackupClient creates a new mock instance.
func NewMockOpenStorageCloudBackupClient(ctrl *gomock.Controller) *MockOpenStorageCloudBackupClient {
	mock := &MockOpenStorageCloudBackupClient{ctrl: ctrl}
	mock.recorder = &MockOpenStorageCloudBackupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageCloudBackupClient) EXPECT() *MockOpenStorageCloudBackupClientMockRecorder {
	return m.recorder
}

// Catalog mocks base method.
func (m *MockOpenStorageCloudBackupClient) Catalog(arg0 context.Context, arg1 *api.SdkCloudBackupCatalogRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupCatalogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Catalog", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Catalog indicates an expected call of Catalog.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) Catalog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Catalog", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).Catalog), varargs...)
}

// Create mocks base method.
func (m *MockOpenStorageCloudBackupClient) Create(arg0 context.Context, arg1 *api.SdkCloudBackupCreateRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockOpenStorageCloudBackupClient) Delete(arg0 context.Context, arg1 *api.SdkCloudBackupDeleteRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).Delete), varargs...)
}

// DeleteAll mocks base method.
func (m *MockOpenStorageCloudBackupClient) DeleteAll(arg0 context.Context, arg1 *api.SdkCloudBackupDeleteAllRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupDeleteAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAll", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupDeleteAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) DeleteAll(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).DeleteAll), varargs...)
}

// EnumerateWithFilters mocks base method.
func (m *MockOpenStorageCloudBackupClient) EnumerateWithFilters(arg0 context.Context, arg1 *api.SdkCloudBackupEnumerateWithFiltersRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupEnumerateWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnumerateWithFilters", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupEnumerateWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumerateWithFilters indicates an expected call of EnumerateWithFilters.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) EnumerateWithFilters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumerateWithFilters", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).EnumerateWithFilters), varargs...)
}

// GroupCreate mocks base method.
func (m *MockOpenStorageCloudBackupClient) GroupCreate(arg0 context.Context, arg1 *api.SdkCloudBackupGroupCreateRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupGroupCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupCreate", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupGroupCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupCreate indicates an expected call of GroupCreate.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) GroupCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).GroupCreate), varargs...)
}

// History mocks base method.
func (m *MockOpenStorageCloudBackupClient) History(arg0 context.Context, arg1 *api.SdkCloudBackupHistoryRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "History", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) History(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).History), varargs...)
}

// Restore mocks base method.
func (m *MockOpenStorageCloudBackupClient) Restore(arg0 context.Context, arg1 *api.SdkCloudBackupRestoreRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupRestoreResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Restore", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupRestoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) Restore(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).Restore), varargs...)
}

// SchedCreate mocks base method.
func (m *MockOpenStorageCloudBackupClient) SchedCreate(arg0 context.Context, arg1 *api.SdkCloudBackupSchedCreateRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupSchedCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SchedCreate", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedCreate indicates an expected call of SchedCreate.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) SchedCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedCreate", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).SchedCreate), varargs...)
}

// SchedDelete mocks base method.
func (m *MockOpenStorageCloudBackupClient) SchedDelete(arg0 context.Context, arg1 *api.SdkCloudBackupSchedDeleteRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupSchedDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SchedDelete", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedDelete indicates an expected call of SchedDelete.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) SchedDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedDelete", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).SchedDelete), varargs...)
}

// SchedEnumerate mocks base method.
func (m *MockOpenStorageCloudBackupClient) SchedEnumerate(arg0 context.Context, arg1 *api.SdkCloudBackupSchedEnumerateRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupSchedEnumerateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SchedEnumerate", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedEnumerate indicates an expected call of SchedEnumerate.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) SchedEnumerate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedEnumerate", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).SchedEnumerate), varargs...)
}

// SchedUpdate mocks base method.
func (m *MockOpenStorageCloudBackupClient) SchedUpdate(arg0 context.Context, arg1 *api.SdkCloudBackupSchedUpdateRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupSchedUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SchedUpdate", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupSchedUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedUpdate indicates an expected call of SchedUpdate.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) SchedUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedUpdate", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).SchedUpdate), varargs...)
}

// Size mocks base method.
func (m *MockOpenStorageCloudBackupClient) Size(arg0 context.Context, arg1 *api.SdkCloudBackupSizeRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupSizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Size", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) Size(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).Size), varargs...)
}

// StateChange mocks base method.
func (m *MockOpenStorageCloudBackupClient) StateChange(arg0 context.Context, arg1 *api.SdkCloudBackupStateChangeRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupStateChangeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StateChange", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupStateChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateChange indicates an expected call of StateChange.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) StateChange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateChange", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).StateChange), varargs...)
}

// Status mocks base method.
func (m *MockOpenStorageCloudBackupClient) Status(arg0 context.Context, arg1 *api.SdkCloudBackupStatusRequest, arg2 ...grpc.CallOption) (*api.SdkCloudBackupStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*api.SdkCloudBackupStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockOpenStorageCloudBackupClientMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockOpenStorageCloudBackupClient)(nil).Status), varargs...)
}
