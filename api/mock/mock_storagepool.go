// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/openstorage/api (interfaces: OpenStoragePoolServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/libopenstorage/openstorage/api"
)

// MockOpenStoragePoolServer is a mock of OpenStoragePoolServer interface
type MockOpenStoragePoolServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStoragePoolServerMockRecorder
}

// MockOpenStoragePoolServerMockRecorder is the mock recorder for MockOpenStoragePoolServer
type MockOpenStoragePoolServerMockRecorder struct {
	mock *MockOpenStoragePoolServer
}

// NewMockOpenStoragePoolServer creates a new mock instance
func NewMockOpenStoragePoolServer(ctrl *gomock.Controller) *MockOpenStoragePoolServer {
	mock := &MockOpenStoragePoolServer{ctrl: ctrl}
	mock.recorder = &MockOpenStoragePoolServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenStoragePoolServer) EXPECT() *MockOpenStoragePoolServerMockRecorder {
	return m.recorder
}

// Resize mocks base method
func (m *MockOpenStoragePoolServer) Resize(arg0 context.Context, arg1 *api.SdkStoragePoolResizeRequest) (*api.SdkStoragePoolResizeResponse, error) {
	ret := m.ctrl.Call(m, "Resize", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkStoragePoolResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resize indicates an expected call of Resize
func (mr *MockOpenStoragePoolServerMockRecorder) Resize(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockOpenStoragePoolServer)(nil).Resize), arg0, arg1)
}
