// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/openstorage/api (interfaces: OpenStorageFilesystemTrimServer,OpenStorageFilesystemTrimClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/libopenstorage/openstorage/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockOpenStorageFilesystemTrimServer is a mock of OpenStorageFilesystemTrimServer interface
type MockOpenStorageFilesystemTrimServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageFilesystemTrimServerMockRecorder
}

// MockOpenStorageFilesystemTrimServerMockRecorder is the mock recorder for MockOpenStorageFilesystemTrimServer
type MockOpenStorageFilesystemTrimServerMockRecorder struct {
	mock *MockOpenStorageFilesystemTrimServer
}

// NewMockOpenStorageFilesystemTrimServer creates a new mock instance
func NewMockOpenStorageFilesystemTrimServer(ctrl *gomock.Controller) *MockOpenStorageFilesystemTrimServer {
	mock := &MockOpenStorageFilesystemTrimServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageFilesystemTrimServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenStorageFilesystemTrimServer) EXPECT() *MockOpenStorageFilesystemTrimServerMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockOpenStorageFilesystemTrimServer) GetStatus(arg0 context.Context, arg1 *api.SdkFilesystemTrimGetStatusRequest) (*api.SdkFilesystemTrimGetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkFilesystemTrimGetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockOpenStorageFilesystemTrimServerMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockOpenStorageFilesystemTrimServer)(nil).GetStatus), arg0, arg1)
}

// Start mocks base method
func (m *MockOpenStorageFilesystemTrimServer) Start(arg0 context.Context, arg1 *api.SdkFilesystemTrimStartRequest) (*api.SdkFilesystemTrimStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkFilesystemTrimStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockOpenStorageFilesystemTrimServerMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOpenStorageFilesystemTrimServer)(nil).Start), arg0, arg1)
}

// Stop mocks base method
func (m *MockOpenStorageFilesystemTrimServer) Stop(arg0 context.Context, arg1 *api.SdkFilesystemTrimStopRequest) (*api.SdkFilesystemTrimStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkFilesystemTrimStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockOpenStorageFilesystemTrimServerMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOpenStorageFilesystemTrimServer)(nil).Stop), arg0, arg1)
}

// MockOpenStorageFilesystemTrimClient is a mock of OpenStorageFilesystemTrimClient interface
type MockOpenStorageFilesystemTrimClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageFilesystemTrimClientMockRecorder
}

// MockOpenStorageFilesystemTrimClientMockRecorder is the mock recorder for MockOpenStorageFilesystemTrimClient
type MockOpenStorageFilesystemTrimClientMockRecorder struct {
	mock *MockOpenStorageFilesystemTrimClient
}

// NewMockOpenStorageFilesystemTrimClient creates a new mock instance
func NewMockOpenStorageFilesystemTrimClient(ctrl *gomock.Controller) *MockOpenStorageFilesystemTrimClient {
	mock := &MockOpenStorageFilesystemTrimClient{ctrl: ctrl}
	mock.recorder = &MockOpenStorageFilesystemTrimClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenStorageFilesystemTrimClient) EXPECT() *MockOpenStorageFilesystemTrimClientMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockOpenStorageFilesystemTrimClient) GetStatus(arg0 context.Context, arg1 *api.SdkFilesystemTrimGetStatusRequest, arg2 ...grpc.CallOption) (*api.SdkFilesystemTrimGetStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(*api.SdkFilesystemTrimGetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockOpenStorageFilesystemTrimClientMockRecorder) GetStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockOpenStorageFilesystemTrimClient)(nil).GetStatus), varargs...)
}

// Start mocks base method
func (m *MockOpenStorageFilesystemTrimClient) Start(arg0 context.Context, arg1 *api.SdkFilesystemTrimStartRequest, arg2 ...grpc.CallOption) (*api.SdkFilesystemTrimStartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(*api.SdkFilesystemTrimStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockOpenStorageFilesystemTrimClientMockRecorder) Start(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOpenStorageFilesystemTrimClient)(nil).Start), varargs...)
}

// Stop mocks base method
func (m *MockOpenStorageFilesystemTrimClient) Stop(arg0 context.Context, arg1 *api.SdkFilesystemTrimStopRequest, arg2 ...grpc.CallOption) (*api.SdkFilesystemTrimStopResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*api.SdkFilesystemTrimStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop
func (mr *MockOpenStorageFilesystemTrimClientMockRecorder) Stop(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOpenStorageFilesystemTrimClient)(nil).Stop), varargs...)
}
