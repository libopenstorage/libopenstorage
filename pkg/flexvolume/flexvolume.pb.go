// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: pkg/flexvolume/flexvolume.proto

package flexvolume

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonOptions map[string]string `protobuf:"bytes,1,rep,name=json_options,json=jsonOptions,proto3" json:"json_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AttachRequest) Reset() {
	*x = AttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachRequest) ProtoMessage() {}

func (x *AttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachRequest.ProtoReflect.Descriptor instead.
func (*AttachRequest) Descriptor() ([]byte, []int) {
	return file_pkg_flexvolume_flexvolume_proto_rawDescGZIP(), []int{0}
}

func (x *AttachRequest) GetJsonOptions() map[string]string {
	if x != nil {
		return x.JsonOptions
	}
	return nil
}

type DetachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountDevice string `protobuf:"bytes,1,opt,name=mount_device,json=mountDevice,proto3" json:"mount_device,omitempty"`
}

func (x *DetachRequest) Reset() {
	*x = DetachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachRequest) ProtoMessage() {}

func (x *DetachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachRequest.ProtoReflect.Descriptor instead.
func (*DetachRequest) Descriptor() ([]byte, []int) {
	return file_pkg_flexvolume_flexvolume_proto_rawDescGZIP(), []int{1}
}

func (x *DetachRequest) GetMountDevice() string {
	if x != nil {
		return x.MountDevice
	}
	return ""
}

type MountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetMountDir string            `protobuf:"bytes,1,opt,name=target_mount_dir,json=targetMountDir,proto3" json:"target_mount_dir,omitempty"`
	MountDevice    string            `protobuf:"bytes,2,opt,name=mount_device,json=mountDevice,proto3" json:"mount_device,omitempty"`
	JsonOptions    map[string]string `protobuf:"bytes,3,rep,name=json_options,json=jsonOptions,proto3" json:"json_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MountRequest) Reset() {
	*x = MountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRequest) ProtoMessage() {}

func (x *MountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRequest.ProtoReflect.Descriptor instead.
func (*MountRequest) Descriptor() ([]byte, []int) {
	return file_pkg_flexvolume_flexvolume_proto_rawDescGZIP(), []int{2}
}

func (x *MountRequest) GetTargetMountDir() string {
	if x != nil {
		return x.TargetMountDir
	}
	return ""
}

func (x *MountRequest) GetMountDevice() string {
	if x != nil {
		return x.MountDevice
	}
	return ""
}

func (x *MountRequest) GetJsonOptions() map[string]string {
	if x != nil {
		return x.JsonOptions
	}
	return nil
}

type UnmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountDir string `protobuf:"bytes,1,opt,name=mount_dir,json=mountDir,proto3" json:"mount_dir,omitempty"`
}

func (x *UnmountRequest) Reset() {
	*x = UnmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmountRequest) ProtoMessage() {}

func (x *UnmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flexvolume_flexvolume_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmountRequest.ProtoReflect.Descriptor instead.
func (*UnmountRequest) Descriptor() ([]byte, []int) {
	return file_pkg_flexvolume_flexvolume_proto_rawDescGZIP(), []int{3}
}

func (x *UnmountRequest) GetMountDir() string {
	if x != nil {
		return x.MountDir
	}
	return ""
}

var File_pkg_flexvolume_flexvolume_proto protoreflect.FileDescriptor

var file_pkg_flexvolume_flexvolume_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x2f, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x0d, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x0e, 0x55, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x32, 0x93, 0x03, 0x0a, 0x03, 0x41, 0x50, 0x49,
	0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a,
	0x22, 0x05, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x06, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22,
	0x07, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c,
	0x22, 0x07, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x4c, 0x0a, 0x05,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22,
	0x06, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x52, 0x0a, 0x07, 0x55, 0x6e,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x22, 0x08, 0x2f, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x1d,
	0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x3b, 0x66, 0x6c, 0x65, 0x78, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_flexvolume_flexvolume_proto_rawDescOnce sync.Once
	file_pkg_flexvolume_flexvolume_proto_rawDescData = file_pkg_flexvolume_flexvolume_proto_rawDesc
)

func file_pkg_flexvolume_flexvolume_proto_rawDescGZIP() []byte {
	file_pkg_flexvolume_flexvolume_proto_rawDescOnce.Do(func() {
		file_pkg_flexvolume_flexvolume_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_flexvolume_flexvolume_proto_rawDescData)
	})
	return file_pkg_flexvolume_flexvolume_proto_rawDescData
}

var file_pkg_flexvolume_flexvolume_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pkg_flexvolume_flexvolume_proto_goTypes = []interface{}{
	(*AttachRequest)(nil),  // 0: flexvolume.AttachRequest
	(*DetachRequest)(nil),  // 1: flexvolume.DetachRequest
	(*MountRequest)(nil),   // 2: flexvolume.MountRequest
	(*UnmountRequest)(nil), // 3: flexvolume.UnmountRequest
	nil,                    // 4: flexvolume.AttachRequest.JsonOptionsEntry
	nil,                    // 5: flexvolume.MountRequest.JsonOptionsEntry
	(*emptypb.Empty)(nil),  // 6: google.protobuf.Empty
}
var file_pkg_flexvolume_flexvolume_proto_depIdxs = []int32{
	4, // 0: flexvolume.AttachRequest.json_options:type_name -> flexvolume.AttachRequest.JsonOptionsEntry
	5, // 1: flexvolume.MountRequest.json_options:type_name -> flexvolume.MountRequest.JsonOptionsEntry
	6, // 2: flexvolume.API.Init:input_type -> google.protobuf.Empty
	0, // 3: flexvolume.API.Attach:input_type -> flexvolume.AttachRequest
	1, // 4: flexvolume.API.Detach:input_type -> flexvolume.DetachRequest
	2, // 5: flexvolume.API.Mount:input_type -> flexvolume.MountRequest
	3, // 6: flexvolume.API.Unmount:input_type -> flexvolume.UnmountRequest
	6, // 7: flexvolume.API.Init:output_type -> google.protobuf.Empty
	6, // 8: flexvolume.API.Attach:output_type -> google.protobuf.Empty
	6, // 9: flexvolume.API.Detach:output_type -> google.protobuf.Empty
	6, // 10: flexvolume.API.Mount:output_type -> google.protobuf.Empty
	6, // 11: flexvolume.API.Unmount:output_type -> google.protobuf.Empty
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_flexvolume_flexvolume_proto_init() }
func file_pkg_flexvolume_flexvolume_proto_init() {
	if File_pkg_flexvolume_flexvolume_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_flexvolume_flexvolume_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flexvolume_flexvolume_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flexvolume_flexvolume_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flexvolume_flexvolume_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_flexvolume_flexvolume_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_flexvolume_flexvolume_proto_goTypes,
		DependencyIndexes: file_pkg_flexvolume_flexvolume_proto_depIdxs,
		MessageInfos:      file_pkg_flexvolume_flexvolume_proto_msgTypes,
	}.Build()
	File_pkg_flexvolume_flexvolume_proto = out.File
	file_pkg_flexvolume_flexvolume_proto_rawDesc = nil
	file_pkg_flexvolume_flexvolume_proto_goTypes = nil
	file_pkg_flexvolume_flexvolume_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	Init(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Init(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/flexvolume.API/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/flexvolume.API/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/flexvolume.API/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/flexvolume.API/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/flexvolume.API/Unmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	Init(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Attach(context.Context, *AttachRequest) (*emptypb.Empty, error)
	Detach(context.Context, *DetachRequest) (*emptypb.Empty, error)
	Mount(context.Context, *MountRequest) (*emptypb.Empty, error)
	Unmount(context.Context, *UnmountRequest) (*emptypb.Empty, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Init(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedAPIServer) Attach(context.Context, *AttachRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (*UnimplementedAPIServer) Detach(context.Context, *DetachRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detach not implemented")
}
func (*UnimplementedAPIServer) Mount(context.Context, *MountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (*UnimplementedAPIServer) Unmount(context.Context, *UnmountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexvolume.API/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Init(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexvolume.API/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Attach(ctx, req.(*AttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexvolume.API/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Detach(ctx, req.(*DetachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexvolume.API/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexvolume.API/Unmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Unmount(ctx, req.(*UnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flexvolume.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _API_Init_Handler,
		},
		{
			MethodName: "Attach",
			Handler:    _API_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _API_Detach_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _API_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _API_Unmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/flexvolume/flexvolume.proto",
}
