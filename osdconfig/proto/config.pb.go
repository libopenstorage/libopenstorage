// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Empty
	Ack
	NodeID
	NodeConfig
	KVDBConfig
	ClusterConfig
	NetworkConfig
	SecretsConfig
	VaultConfig
	AWSConfig
	StorageConfig
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Ack struct {
	N int64 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto1.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ack) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type NodeID struct {
	ID string `protobuf:"bytes,1,opt,name=i_d,json=iD" json:"i_d,omitempty"`
}

func (m *NodeID) Reset()                    { *m = NodeID{} }
func (m *NodeID) String() string            { return proto1.CompactTextString(m) }
func (*NodeID) ProtoMessage()               {}
func (*NodeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NodeID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type NodeConfig struct {
	NodeId  string         `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Network *NetworkConfig `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	Secrets *SecretsConfig `protobuf:"bytes,3,opt,name=secrets" json:"secrets,omitempty"`
	Storage *StorageConfig `protobuf:"bytes,4,opt,name=storage" json:"storage,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto1.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NodeConfig) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeConfig) GetNetwork() *NetworkConfig {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *NodeConfig) GetSecrets() *SecretsConfig {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *NodeConfig) GetStorage() *StorageConfig {
	if m != nil {
		return m.Storage
	}
	return nil
}

type KVDBConfig struct {
	Username       string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password       string   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	CaFile         string   `protobuf:"bytes,3,opt,name=ca_file,json=caFile" json:"ca_file,omitempty"`
	CertFile       string   `protobuf:"bytes,4,opt,name=cert_file,json=certFile" json:"cert_file,omitempty"`
	TrustedCaFile  string   `protobuf:"bytes,5,opt,name=trusted_ca_file,json=trustedCaFile" json:"trusted_ca_file,omitempty"`
	ClientCertAuth string   `protobuf:"bytes,6,opt,name=client_cert_auth,json=clientCertAuth" json:"client_cert_auth,omitempty"`
	AclToken       string   `protobuf:"bytes,7,opt,name=acl_token,json=aclToken" json:"acl_token,omitempty"`
	KvdbAddr       []string `protobuf:"bytes,8,rep,name=kvdb_addr,json=kvdbAddr" json:"kvdb_addr,omitempty"`
}

func (m *KVDBConfig) Reset()                    { *m = KVDBConfig{} }
func (m *KVDBConfig) String() string            { return proto1.CompactTextString(m) }
func (*KVDBConfig) ProtoMessage()               {}
func (*KVDBConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *KVDBConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *KVDBConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *KVDBConfig) GetCaFile() string {
	if m != nil {
		return m.CaFile
	}
	return ""
}

func (m *KVDBConfig) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func (m *KVDBConfig) GetTrustedCaFile() string {
	if m != nil {
		return m.TrustedCaFile
	}
	return ""
}

func (m *KVDBConfig) GetClientCertAuth() string {
	if m != nil {
		return m.ClientCertAuth
	}
	return ""
}

func (m *KVDBConfig) GetAclToken() string {
	if m != nil {
		return m.AclToken
	}
	return ""
}

func (m *KVDBConfig) GetKvdbAddr() []string {
	if m != nil {
		return m.KvdbAddr
	}
	return nil
}

type ClusterConfig struct {
	Description    string                 `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Mode           string                 `protobuf:"bytes,2,opt,name=mode" json:"mode,omitempty"`
	Version        string                 `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Created        string                 `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	ClusterId      string                 `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	LoggingUrl     string                 `protobuf:"bytes,6,opt,name=logging_url,json=loggingUrl" json:"logging_url,omitempty"`
	AlertingUrl    string                 `protobuf:"bytes,7,opt,name=alerting_url,json=alertingUrl" json:"alerting_url,omitempty"`
	Scheduler      string                 `protobuf:"bytes,8,opt,name=scheduler" json:"scheduler,omitempty"`
	Multicontainer bool                   `protobuf:"varint,9,opt,name=multicontainer" json:"multicontainer,omitempty"`
	Nolh           bool                   `protobuf:"varint,10,opt,name=nolh" json:"nolh,omitempty"`
	Callhome       bool                   `protobuf:"varint,11,opt,name=callhome" json:"callhome,omitempty"`
	Bootstrap      bool                   `protobuf:"varint,12,opt,name=bootstrap" json:"bootstrap,omitempty"`
	TunnelEndPoint string                 `protobuf:"bytes,13,opt,name=tunnel_end_point,json=tunnelEndPoint" json:"tunnel_end_point,omitempty"`
	TunnelCerts    []string               `protobuf:"bytes,14,rep,name=tunnel_certs,json=tunnelCerts" json:"tunnel_certs,omitempty"`
	Driver         string                 `protobuf:"bytes,15,opt,name=driver" json:"driver,omitempty"`
	DebugLevel     string                 `protobuf:"bytes,16,opt,name=debug_level,json=debugLevel" json:"debug_level,omitempty"`
	Domain         string                 `protobuf:"bytes,17,opt,name=domain" json:"domain,omitempty"`
	Mgmtip         string                 `protobuf:"bytes,18,opt,name=mgmtip" json:"mgmtip,omitempty"`
	Dataip         string                 `protobuf:"bytes,19,opt,name=dataip" json:"dataip,omitempty"`
	Nodes          map[string]*NodeConfig `protobuf:"bytes,20,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Kvdb           *KVDBConfig            `protobuf:"bytes,21,opt,name=kvdb" json:"kvdb,omitempty"`
}

func (m *ClusterConfig) Reset()                    { *m = ClusterConfig{} }
func (m *ClusterConfig) String() string            { return proto1.CompactTextString(m) }
func (*ClusterConfig) ProtoMessage()               {}
func (*ClusterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClusterConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ClusterConfig) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *ClusterConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClusterConfig) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *ClusterConfig) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterConfig) GetLoggingUrl() string {
	if m != nil {
		return m.LoggingUrl
	}
	return ""
}

func (m *ClusterConfig) GetAlertingUrl() string {
	if m != nil {
		return m.AlertingUrl
	}
	return ""
}

func (m *ClusterConfig) GetScheduler() string {
	if m != nil {
		return m.Scheduler
	}
	return ""
}

func (m *ClusterConfig) GetMulticontainer() bool {
	if m != nil {
		return m.Multicontainer
	}
	return false
}

func (m *ClusterConfig) GetNolh() bool {
	if m != nil {
		return m.Nolh
	}
	return false
}

func (m *ClusterConfig) GetCallhome() bool {
	if m != nil {
		return m.Callhome
	}
	return false
}

func (m *ClusterConfig) GetBootstrap() bool {
	if m != nil {
		return m.Bootstrap
	}
	return false
}

func (m *ClusterConfig) GetTunnelEndPoint() string {
	if m != nil {
		return m.TunnelEndPoint
	}
	return ""
}

func (m *ClusterConfig) GetTunnelCerts() []string {
	if m != nil {
		return m.TunnelCerts
	}
	return nil
}

func (m *ClusterConfig) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *ClusterConfig) GetDebugLevel() string {
	if m != nil {
		return m.DebugLevel
	}
	return ""
}

func (m *ClusterConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ClusterConfig) GetMgmtip() string {
	if m != nil {
		return m.Mgmtip
	}
	return ""
}

func (m *ClusterConfig) GetDataip() string {
	if m != nil {
		return m.Dataip
	}
	return ""
}

func (m *ClusterConfig) GetNodes() map[string]*NodeConfig {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ClusterConfig) GetKvdb() *KVDBConfig {
	if m != nil {
		return m.Kvdb
	}
	return nil
}

type NetworkConfig struct {
	MgtIface  string `protobuf:"bytes,1,opt,name=mgt_iface,json=mgtIface" json:"mgt_iface,omitempty"`
	DataIface string `protobuf:"bytes,2,opt,name=data_iface,json=dataIface" json:"data_iface,omitempty"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto1.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NetworkConfig) GetMgtIface() string {
	if m != nil {
		return m.MgtIface
	}
	return ""
}

func (m *NetworkConfig) GetDataIface() string {
	if m != nil {
		return m.DataIface
	}
	return ""
}

type SecretsConfig struct {
	SecretType       string       `protobuf:"bytes,1,opt,name=secret_type,json=secretType" json:"secret_type,omitempty"`
	ClusterSecretKey string       `protobuf:"bytes,2,opt,name=cluster_secret_key,json=clusterSecretKey" json:"cluster_secret_key,omitempty"`
	Vault            *VaultConfig `protobuf:"bytes,3,opt,name=vault" json:"vault,omitempty"`
	Aws              *AWSConfig   `protobuf:"bytes,4,opt,name=aws" json:"aws,omitempty"`
}

func (m *SecretsConfig) Reset()                    { *m = SecretsConfig{} }
func (m *SecretsConfig) String() string            { return proto1.CompactTextString(m) }
func (*SecretsConfig) ProtoMessage()               {}
func (*SecretsConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SecretsConfig) GetSecretType() string {
	if m != nil {
		return m.SecretType
	}
	return ""
}

func (m *SecretsConfig) GetClusterSecretKey() string {
	if m != nil {
		return m.ClusterSecretKey
	}
	return ""
}

func (m *SecretsConfig) GetVault() *VaultConfig {
	if m != nil {
		return m.Vault
	}
	return nil
}

func (m *SecretsConfig) GetAws() *AWSConfig {
	if m != nil {
		return m.Aws
	}
	return nil
}

type VaultConfig struct {
	VaultToken         string `protobuf:"bytes,1,opt,name=vault_token,json=vaultToken" json:"vault_token,omitempty"`
	VaultAddr          string `protobuf:"bytes,2,opt,name=vault_addr,json=vaultAddr" json:"vault_addr,omitempty"`
	VaultCacert        string `protobuf:"bytes,3,opt,name=vault_cacert,json=vaultCacert" json:"vault_cacert,omitempty"`
	VaultCapath        string `protobuf:"bytes,4,opt,name=vault_capath,json=vaultCapath" json:"vault_capath,omitempty"`
	VaultClientCert    string `protobuf:"bytes,5,opt,name=vault_client_cert,json=vaultClientCert" json:"vault_client_cert,omitempty"`
	VaultClientKey     string `protobuf:"bytes,6,opt,name=vault_client_key,json=vaultClientKey" json:"vault_client_key,omitempty"`
	VaultSkipVerify    string `protobuf:"bytes,7,opt,name=vault_skip_verify,json=vaultSkipVerify" json:"vault_skip_verify,omitempty"`
	VaultTlsServerName string `protobuf:"bytes,8,opt,name=vault_tls_server_name,json=vaultTlsServerName" json:"vault_tls_server_name,omitempty"`
	VaultBasePath      string `protobuf:"bytes,9,opt,name=vault_base_path,json=vaultBasePath" json:"vault_base_path,omitempty"`
}

func (m *VaultConfig) Reset()                    { *m = VaultConfig{} }
func (m *VaultConfig) String() string            { return proto1.CompactTextString(m) }
func (*VaultConfig) ProtoMessage()               {}
func (*VaultConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VaultConfig) GetVaultToken() string {
	if m != nil {
		return m.VaultToken
	}
	return ""
}

func (m *VaultConfig) GetVaultAddr() string {
	if m != nil {
		return m.VaultAddr
	}
	return ""
}

func (m *VaultConfig) GetVaultCacert() string {
	if m != nil {
		return m.VaultCacert
	}
	return ""
}

func (m *VaultConfig) GetVaultCapath() string {
	if m != nil {
		return m.VaultCapath
	}
	return ""
}

func (m *VaultConfig) GetVaultClientCert() string {
	if m != nil {
		return m.VaultClientCert
	}
	return ""
}

func (m *VaultConfig) GetVaultClientKey() string {
	if m != nil {
		return m.VaultClientKey
	}
	return ""
}

func (m *VaultConfig) GetVaultSkipVerify() string {
	if m != nil {
		return m.VaultSkipVerify
	}
	return ""
}

func (m *VaultConfig) GetVaultTlsServerName() string {
	if m != nil {
		return m.VaultTlsServerName
	}
	return ""
}

func (m *VaultConfig) GetVaultBasePath() string {
	if m != nil {
		return m.VaultBasePath
	}
	return ""
}

type AWSConfig struct {
	AwsAccessKeyId     string `protobuf:"bytes,1,opt,name=aws_access_key_id,json=awsAccessKeyId" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey string `protobuf:"bytes,2,opt,name=aws_secret_access_key,json=awsSecretAccessKey" json:"aws_secret_access_key,omitempty"`
	AwsSecretTokenKey  string `protobuf:"bytes,3,opt,name=aws_secret_token_key,json=awsSecretTokenKey" json:"aws_secret_token_key,omitempty"`
	AwsCmk             string `protobuf:"bytes,4,opt,name=aws_cmk,json=awsCmk" json:"aws_cmk,omitempty"`
	AwsRegion          string `protobuf:"bytes,5,opt,name=aws_region,json=awsRegion" json:"aws_region,omitempty"`
}

func (m *AWSConfig) Reset()                    { *m = AWSConfig{} }
func (m *AWSConfig) String() string            { return proto1.CompactTextString(m) }
func (*AWSConfig) ProtoMessage()               {}
func (*AWSConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AWSConfig) GetAwsAccessKeyId() string {
	if m != nil {
		return m.AwsAccessKeyId
	}
	return ""
}

func (m *AWSConfig) GetAwsSecretAccessKey() string {
	if m != nil {
		return m.AwsSecretAccessKey
	}
	return ""
}

func (m *AWSConfig) GetAwsSecretTokenKey() string {
	if m != nil {
		return m.AwsSecretTokenKey
	}
	return ""
}

func (m *AWSConfig) GetAwsCmk() string {
	if m != nil {
		return m.AwsCmk
	}
	return ""
}

func (m *AWSConfig) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

type StorageConfig struct {
	DevicesMd        []string `protobuf:"bytes,1,rep,name=devices_md,json=devicesMd" json:"devices_md,omitempty"`
	MaxCount         int32    `protobuf:"varint,2,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
	MaxDriveSetCount int32    `protobuf:"varint,3,opt,name=max_drive_set_count,json=maxDriveSetCount" json:"max_drive_set_count,omitempty"`
	Devices          []string `protobuf:"bytes,4,rep,name=devices" json:"devices,omitempty"`
	RaidLevel        string   `protobuf:"bytes,5,opt,name=raid_level,json=raidLevel" json:"raid_level,omitempty"`
	RaidLevelMd      string   `protobuf:"bytes,6,opt,name=raid_level_md,json=raidLevelMd" json:"raid_level_md,omitempty"`
	AsyncIo          bool     `protobuf:"varint,7,opt,name=async_io,json=asyncIo" json:"async_io,omitempty"`
	NumThreads       int32    `protobuf:"varint,8,opt,name=num_threads,json=numThreads" json:"num_threads,omitempty"`
}

func (m *StorageConfig) Reset()                    { *m = StorageConfig{} }
func (m *StorageConfig) String() string            { return proto1.CompactTextString(m) }
func (*StorageConfig) ProtoMessage()               {}
func (*StorageConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StorageConfig) GetDevicesMd() []string {
	if m != nil {
		return m.DevicesMd
	}
	return nil
}

func (m *StorageConfig) GetMaxCount() int32 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *StorageConfig) GetMaxDriveSetCount() int32 {
	if m != nil {
		return m.MaxDriveSetCount
	}
	return 0
}

func (m *StorageConfig) GetDevices() []string {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *StorageConfig) GetRaidLevel() string {
	if m != nil {
		return m.RaidLevel
	}
	return ""
}

func (m *StorageConfig) GetRaidLevelMd() string {
	if m != nil {
		return m.RaidLevelMd
	}
	return ""
}

func (m *StorageConfig) GetAsyncIo() bool {
	if m != nil {
		return m.AsyncIo
	}
	return false
}

func (m *StorageConfig) GetNumThreads() int32 {
	if m != nil {
		return m.NumThreads
	}
	return 0
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*Ack)(nil), "proto.Ack")
	proto1.RegisterType((*NodeID)(nil), "proto.NodeID")
	proto1.RegisterType((*NodeConfig)(nil), "proto.NodeConfig")
	proto1.RegisterType((*KVDBConfig)(nil), "proto.KVDBConfig")
	proto1.RegisterType((*ClusterConfig)(nil), "proto.ClusterConfig")
	proto1.RegisterType((*NetworkConfig)(nil), "proto.NetworkConfig")
	proto1.RegisterType((*SecretsConfig)(nil), "proto.SecretsConfig")
	proto1.RegisterType((*VaultConfig)(nil), "proto.VaultConfig")
	proto1.RegisterType((*AWSConfig)(nil), "proto.AWSConfig")
	proto1.RegisterType((*StorageConfig)(nil), "proto.StorageConfig")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Spec service

type SpecClient interface {
	GetClusterSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClusterConfig, error)
	SetClusterSpec(ctx context.Context, in *ClusterConfig, opts ...grpc.CallOption) (*Ack, error)
	GetNodeSpec(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*NodeConfig, error)
	SetNodeSpec(ctx context.Context, in *NodeConfig, opts ...grpc.CallOption) (*Ack, error)
}

type specClient struct {
	cc *grpc.ClientConn
}

func NewSpecClient(cc *grpc.ClientConn) SpecClient {
	return &specClient{cc}
}

func (c *specClient) GetClusterSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClusterConfig, error) {
	out := new(ClusterConfig)
	err := grpc.Invoke(ctx, "/proto.Spec/GetClusterSpec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) SetClusterSpec(ctx context.Context, in *ClusterConfig, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.Spec/SetClusterSpec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) GetNodeSpec(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*NodeConfig, error) {
	out := new(NodeConfig)
	err := grpc.Invoke(ctx, "/proto.Spec/GetNodeSpec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) SetNodeSpec(ctx context.Context, in *NodeConfig, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/proto.Spec/SetNodeSpec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spec service

type SpecServer interface {
	GetClusterSpec(context.Context, *Empty) (*ClusterConfig, error)
	SetClusterSpec(context.Context, *ClusterConfig) (*Ack, error)
	GetNodeSpec(context.Context, *NodeID) (*NodeConfig, error)
	SetNodeSpec(context.Context, *NodeConfig) (*Ack, error)
}

func RegisterSpecServer(s *grpc.Server, srv SpecServer) {
	s.RegisterService(&_Spec_serviceDesc, srv)
}

func _Spec_GetClusterSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).GetClusterSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Spec/GetClusterSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).GetClusterSpec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_SetClusterSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).SetClusterSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Spec/SetClusterSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).SetClusterSpec(ctx, req.(*ClusterConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_GetNodeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).GetNodeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Spec/GetNodeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).GetNodeSpec(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_SetNodeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).SetNodeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Spec/SetNodeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).SetNodeSpec(ctx, req.(*NodeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Spec",
	HandlerType: (*SpecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterSpec",
			Handler:    _Spec_GetClusterSpec_Handler,
		},
		{
			MethodName: "SetClusterSpec",
			Handler:    _Spec_SetClusterSpec_Handler,
		},
		{
			MethodName: "GetNodeSpec",
			Handler:    _Spec_GetNodeSpec_Handler,
		},
		{
			MethodName: "SetNodeSpec",
			Handler:    _Spec_SetNodeSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto1.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0xdb, 0x6e, 0x1b, 0x47,
	0x0f, 0x8e, 0x2c, 0x4b, 0xb2, 0x28, 0xcb, 0x87, 0x89, 0xf3, 0x67, 0xe3, 0xbf, 0x41, 0xdc, 0x05,
	0x9a, 0xba, 0x45, 0xeb, 0x22, 0xe9, 0x01, 0x45, 0xef, 0x1c, 0x39, 0x0d, 0x04, 0x37, 0x41, 0x20,
	0xa5, 0xe9, 0xe5, 0x62, 0xbc, 0x43, 0x4b, 0x0b, 0xed, 0x09, 0x33, 0xb3, 0x52, 0xf4, 0x02, 0x7d,
	0x81, 0xbe, 0x46, 0x6f, 0xfb, 0x22, 0xbd, 0xe9, 0x33, 0xf4, 0xae, 0x8f, 0x50, 0x90, 0x33, 0xab,
	0x43, 0x93, 0x2b, 0x8b, 0x1f, 0x3f, 0xce, 0x90, 0x1c, 0xf2, 0x5b, 0xc3, 0x7e, 0x5c, 0xe4, 0xb7,
	0xc9, 0xe4, 0xa2, 0xd4, 0x85, 0x2d, 0x44, 0x8b, 0xff, 0x84, 0x1d, 0x68, 0x3d, 0xcf, 0x4a, 0xbb,
	0x0c, 0xef, 0x42, 0xf3, 0x32, 0x9e, 0x89, 0x7d, 0x68, 0xe4, 0x41, 0xe3, 0xac, 0x71, 0xde, 0x1c,
	0x35, 0xf2, 0xf0, 0x01, 0xb4, 0x5f, 0x15, 0x0a, 0x87, 0x57, 0xe2, 0x10, 0x9a, 0x49, 0xa4, 0xd8,
	0xd3, 0x1d, 0xed, 0x24, 0x57, 0xe1, 0x1f, 0x0d, 0x00, 0xf2, 0x0d, 0xf8, 0x50, 0x71, 0x1f, 0x3a,
	0x79, 0xa1, 0x30, 0x4a, 0x6a, 0x4e, 0x9b, 0xcc, 0xa1, 0x12, 0x17, 0xd0, 0xc9, 0xd1, 0x2e, 0x0a,
	0x3d, 0x0b, 0x76, 0xce, 0x1a, 0xe7, 0xbd, 0xa7, 0x27, 0x2e, 0x81, 0x8b, 0x57, 0x0e, 0x75, 0xf1,
	0xa3, 0x9a, 0x44, 0x7c, 0x83, 0xb1, 0x46, 0x6b, 0x82, 0xe6, 0x16, 0x7f, 0xec, 0xd0, 0x9a, 0xef,
	0x49, 0xcc, 0xb7, 0x85, 0x96, 0x13, 0x0c, 0x76, 0xb7, 0xf9, 0x0e, 0x5d, 0xf1, 0x9d, 0x19, 0xfe,
	0xba, 0x03, 0x70, 0xfd, 0xf6, 0xea, 0x99, 0xcf, 0xfb, 0x14, 0xf6, 0x2a, 0x83, 0x3a, 0x97, 0x19,
	0xfa, 0xc4, 0x57, 0x36, 0xf9, 0x4a, 0x69, 0xcc, 0xa2, 0xd0, 0x8a, 0x73, 0xef, 0x8e, 0x56, 0x36,
	0xd5, 0x1b, 0xcb, 0xe8, 0x36, 0x49, 0x91, 0xd3, 0xec, 0x8e, 0xda, 0xb1, 0xfc, 0x31, 0x49, 0x51,
	0xfc, 0x1f, 0xba, 0x31, 0x6a, 0xeb, 0x5c, 0xbb, 0x2e, 0x8a, 0x00, 0x76, 0x3e, 0x86, 0x43, 0xab,
	0x2b, 0x63, 0x51, 0x45, 0x75, 0x74, 0x8b, 0x29, 0x7d, 0x0f, 0x0f, 0xdc, 0x21, 0xe7, 0x70, 0x14,
	0xa7, 0x09, 0xe6, 0x36, 0xe2, 0xb3, 0x64, 0x65, 0xa7, 0x41, 0x9b, 0x89, 0x07, 0x0e, 0x1f, 0xa0,
	0xb6, 0x97, 0x95, 0x9d, 0xd2, 0x75, 0x32, 0x4e, 0x23, 0x5b, 0xcc, 0x30, 0x0f, 0x3a, 0xee, 0x3a,
	0x19, 0xa7, 0x6f, 0xc8, 0x26, 0xe7, 0x6c, 0xae, 0x6e, 0x22, 0xa9, 0x94, 0x0e, 0xf6, 0xce, 0x9a,
	0xe4, 0x24, 0xe0, 0x52, 0x29, 0x1d, 0xfe, 0xdd, 0x82, 0xfe, 0x20, 0xa5, 0x5b, 0xb5, 0xef, 0xc5,
	0x19, 0xf4, 0x14, 0x9a, 0x58, 0x27, 0xa5, 0x4d, 0x8a, 0xdc, 0xb7, 0x63, 0x13, 0x12, 0x02, 0x76,
	0xb3, 0x42, 0xa1, 0xef, 0x06, 0xff, 0x16, 0x01, 0x74, 0xe6, 0xa8, 0x0d, 0x45, 0xb8, 0x4e, 0xd4,
	0x26, 0x79, 0x62, 0x8d, 0xd2, 0xa2, 0xf2, 0x8d, 0xa8, 0x4d, 0xf1, 0x10, 0x20, 0x76, 0x57, 0xd3,
	0xc0, 0xb8, 0x16, 0x74, 0x3d, 0x32, 0x54, 0xe2, 0x11, 0xf4, 0xd2, 0x62, 0x32, 0x49, 0xf2, 0x49,
	0x54, 0xe9, 0xd4, 0x57, 0x0e, 0x1e, 0xfa, 0x59, 0xa7, 0xe2, 0x63, 0xd8, 0x97, 0x29, 0x6a, 0x5b,
	0x33, 0x5c, 0xe1, 0xbd, 0x1a, 0x23, 0xca, 0x47, 0xd0, 0x35, 0xf1, 0x14, 0x55, 0x95, 0x22, 0xd5,
	0xce, 0x37, 0xac, 0x00, 0xf1, 0x18, 0x0e, 0xb2, 0x2a, 0xb5, 0x49, 0x5c, 0xe4, 0x56, 0x26, 0x39,
	0xea, 0xa0, 0x7b, 0xd6, 0x38, 0xdf, 0x1b, 0xfd, 0x07, 0xa5, 0x82, 0xf3, 0x22, 0x9d, 0x06, 0xc0,
	0x5e, 0xfe, 0x4d, 0x63, 0x11, 0xcb, 0x34, 0x9d, 0x16, 0x19, 0x06, 0x3d, 0xc6, 0x57, 0x36, 0xdd,
	0x7a, 0x53, 0x14, 0xd6, 0x58, 0x2d, 0xcb, 0x60, 0x9f, 0x9d, 0x6b, 0x80, 0x9e, 0xd5, 0x56, 0x79,
	0x8e, 0x69, 0x84, 0xb9, 0x8a, 0xca, 0x22, 0xc9, 0x6d, 0xd0, 0x77, 0xcf, 0xea, 0xf0, 0xe7, 0xb9,
	0x7a, 0x4d, 0x28, 0x15, 0xe8, 0x99, 0x34, 0x00, 0x26, 0x38, 0xe0, 0xc7, 0xeb, 0x39, 0x8c, 0x1e,
	0xdf, 0x88, 0xff, 0x41, 0x5b, 0xe9, 0x64, 0x8e, 0x3a, 0x38, 0x74, 0x03, 0xe8, 0x2c, 0x6a, 0x9e,
	0xc2, 0x9b, 0x6a, 0x12, 0xa5, 0x38, 0xc7, 0x34, 0x38, 0x72, 0xcd, 0x63, 0xe8, 0x27, 0x42, 0x38,
	0xb0, 0xc8, 0x64, 0x92, 0x07, 0xc7, 0x3e, 0x90, 0x2d, 0xc2, 0xb3, 0x49, 0x66, 0x93, 0x32, 0x10,
	0x0e, 0x77, 0x16, 0xf3, 0xa5, 0x95, 0x49, 0x19, 0xdc, 0xf5, 0x7c, 0xb6, 0xc4, 0xb7, 0xd0, 0xa2,
	0x1d, 0x37, 0xc1, 0xc9, 0x59, 0xf3, 0xbc, 0xf7, 0xf4, 0x91, 0xdf, 0xbb, 0xad, 0x99, 0xba, 0x20,
	0x89, 0x30, 0xcf, 0x73, 0xab, 0x97, 0x23, 0xc7, 0x16, 0x9f, 0xc0, 0x2e, 0xcd, 0x60, 0x70, 0x8f,
	0xb7, 0xf5, 0xd8, 0x47, 0xad, 0x57, 0x72, 0xc4, 0xee, 0xd3, 0x6b, 0x27, 0x2f, 0x2e, 0x56, 0x1c,
	0x41, 0x73, 0x86, 0x4b, 0x3f, 0x92, 0xf4, 0x53, 0x7c, 0x0a, 0xad, 0xb9, 0x4c, 0x2b, 0xf4, 0xaa,
	0x52, 0x9f, 0xb3, 0x96, 0xa4, 0x91, 0xf3, 0xff, 0xb0, 0xf3, 0x7d, 0x23, 0xbc, 0x86, 0xfe, 0x96,
	0xdc, 0xd0, 0x66, 0x64, 0x13, 0x1b, 0x25, 0xb7, 0x32, 0x5e, 0xed, 0x7d, 0x36, 0xb1, 0x43, 0xb2,
	0x69, 0x3a, 0xa9, 0x44, 0xef, 0x75, 0xb3, 0xde, 0x25, 0x84, 0xdd, 0xe1, 0xef, 0x0d, 0xe8, 0x6f,
	0x89, 0x11, 0xb5, 0xdc, 0xc9, 0x51, 0x64, 0x97, 0x65, 0x7d, 0x1e, 0x38, 0xe8, 0xcd, 0xb2, 0x44,
	0xf1, 0x05, 0x88, 0x7a, 0xde, 0x3d, 0x91, 0xaa, 0x71, 0x27, 0x1f, 0x79, 0x8f, 0x3b, 0xf2, 0x1a,
	0x97, 0xe2, 0x9c, 0x4a, 0xab, 0x52, 0xeb, 0x05, 0x50, 0xf8, 0xd2, 0xde, 0x12, 0xb6, 0xae, 0xad,
	0x4a, 0xad, 0x08, 0xa1, 0x29, 0x17, 0xc6, 0x0b, 0xdf, 0x91, 0xe7, 0x5d, 0xfe, 0x32, 0xf6, 0x2c,
	0x72, 0x86, 0xff, 0xec, 0x40, 0x6f, 0x23, 0x94, 0x92, 0xe5, 0x60, 0xaf, 0x19, 0x3e, 0x59, 0x86,
	0x9c, 0x6a, 0x3c, 0x04, 0x67, 0x39, 0xd9, 0xf0, 0xe5, 0x33, 0x42, 0xba, 0x41, 0xa3, 0xe9, 0xdc,
	0xb1, 0xa4, 0xd9, 0xf4, 0x4b, 0xef, 0xce, 0x1c, 0x30, 0xb4, 0x49, 0x29, 0xa5, 0x9d, 0xfa, 0xed,
	0xaf, 0x29, 0x04, 0x89, 0xcf, 0xe1, 0xd8, 0x53, 0xd6, 0x3a, 0xe7, 0x85, 0xe0, 0xd0, 0xf1, 0x56,
	0x3a, 0x47, 0x6b, 0xb3, 0xc5, 0xa5, 0xde, 0x79, 0x35, 0xdc, 0xa0, 0x52, 0xe7, 0x56, 0xa7, 0x9a,
	0x59, 0x52, 0x46, 0x73, 0xd4, 0xc9, 0xed, 0xd2, 0x8b, 0x83, 0x3b, 0x75, 0x3c, 0x4b, 0xca, 0xb7,
	0x0c, 0x8b, 0x27, 0x70, 0xcf, 0xf7, 0x21, 0x35, 0x91, 0x41, 0x3d, 0x47, 0x1d, 0xf1, 0x67, 0xc0,
	0x89, 0x85, 0x70, 0x1d, 0x49, 0xcd, 0x98, 0x5d, 0xaf, 0xe8, 0x83, 0xf0, 0x18, 0xdc, 0x29, 0xd1,
	0x8d, 0x34, 0x18, 0x71, 0x69, 0x5d, 0x27, 0xdf, 0x0c, 0x3f, 0x93, 0x06, 0x5f, 0x4b, 0x3b, 0x0d,
	0xff, 0x6c, 0x40, 0x77, 0xf5, 0x0a, 0xe2, 0x33, 0x38, 0x96, 0x0b, 0x13, 0xc9, 0x38, 0x46, 0x63,
	0x28, 0xf9, 0xf5, 0x47, 0xf2, 0x40, 0x2e, 0xcc, 0x25, 0xe3, 0xd7, 0xb8, 0x1c, 0x2a, 0xca, 0x89,
	0xa8, 0x7e, 0x46, 0xd6, 0x11, 0xfe, 0x15, 0x84, 0x5c, 0x18, 0x37, 0x26, 0xab, 0x20, 0xf1, 0x15,
	0x9c, 0x6c, 0x84, 0xf0, 0x9b, 0x72, 0x84, 0x7b, 0x96, 0xe3, 0x55, 0x04, 0xbf, 0x2d, 0x05, 0xdc,
	0x87, 0x0e, 0x05, 0xc4, 0xd9, 0xcc, 0xbf, 0x4b, 0x5b, 0x2e, 0xcc, 0x20, 0x9b, 0xd1, 0xbb, 0x93,
	0x43, 0xe3, 0x84, 0xb4, 0xdc, 0x8b, 0xb2, 0x5c, 0x98, 0x11, 0x03, 0xe1, 0x6f, 0x3b, 0xd0, 0xdf,
	0xfa, 0xa6, 0xf2, 0x9e, 0xe0, 0x3c, 0x89, 0xd1, 0x44, 0x19, 0x55, 0xd4, 0xe4, 0x3d, 0x71, 0xc8,
	0x4b, 0xc5, 0x3b, 0x26, 0xdf, 0x45, 0x71, 0x51, 0xe5, 0x96, 0x0b, 0x68, 0x8d, 0xf6, 0x32, 0xf9,
	0x6e, 0x40, 0xb6, 0xf8, 0x12, 0xee, 0x92, 0x93, 0x35, 0x2b, 0x32, 0x68, 0x3d, 0xad, 0xc9, 0xb4,
	0xa3, 0x4c, 0xbe, 0xbb, 0x22, 0xcf, 0x18, 0xad, 0xa3, 0x07, 0xd0, 0xf1, 0x07, 0x07, 0xbb, 0x7c,
	0x4f, 0x6d, 0x52, 0x12, 0x5a, 0x26, 0xca, 0xab, 0x9d, 0xcf, 0x9a, 0x10, 0x27, 0x76, 0x21, 0xf4,
	0xd7, 0x6e, 0x4a, 0xd3, 0x0d, 0x4e, 0x6f, 0xc5, 0x78, 0xa9, 0xc4, 0x03, 0xd8, 0x93, 0x66, 0x99,
	0xc7, 0x51, 0x52, 0xf0, 0xb0, 0xec, 0x8d, 0x3a, 0x6c, 0x0f, 0x0b, 0x5a, 0x96, 0xbc, 0xca, 0x22,
	0x3b, 0xd5, 0x28, 0x95, 0xe1, 0xd1, 0x68, 0x8d, 0x20, 0xaf, 0xb2, 0x37, 0x0e, 0x79, 0xfa, 0x57,
	0x03, 0x76, 0xc7, 0x25, 0xc6, 0xe2, 0x3b, 0x38, 0x78, 0x81, 0xd6, 0x8b, 0x1f, 0x23, 0xfb, 0x7e,
	0x1f, 0xf9, 0xff, 0xab, 0xd3, 0x93, 0x0f, 0xc9, 0x63, 0x78, 0x47, 0x7c, 0x03, 0x07, 0xe3, 0xed,
	0xb8, 0x0f, 0x32, 0x4f, 0xa1, 0xde, 0xee, 0x78, 0x16, 0xde, 0x11, 0x4f, 0xa0, 0xf7, 0x02, 0x2d,
	0x89, 0x1d, 0x87, 0xf4, 0x37, 0xd4, 0x6f, 0x78, 0x75, 0xfa, 0xbe, 0x18, 0x86, 0x77, 0xc4, 0x05,
	0xf4, 0xc6, 0x1b, 0x21, 0xef, 0x73, 0xb6, 0xaf, 0xb8, 0x69, 0xb3, 0xf1, 0xf5, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x3c, 0x8a, 0x6f, 0xa7, 0x37, 0x0a, 0x00, 0x00,
}
