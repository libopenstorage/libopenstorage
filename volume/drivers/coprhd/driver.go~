package coprhd

import (
	"fmt"
	"strings"
	"net/url"
	"log"
	"net/http"
	"crypto/tls"
	"github.com/libopenstorage/openstorage/api"
//	"github.com/libopenstorage/openstorage/config"
	"github.com/libopenstorage/openstorage/volume"
	"gopkg.in/jmcvetta/napping.v3"
)

const (
	Name           = "coprhd"
	Type           = api.Block
	RESTBaseUrl    = "https://192.168.3.220:4443/"
	APIUser	       = "root"
	APIPassword    = "D1g1tal*23"
)

type driver struct {
	volume.VolumeDriver
}

func Init(params volume.DriverParams) (volume.VolumeDriver, error) {

	d := &driver{

	} 

	return d, nil	
}

func (d *driver) String() string {
	return Name
}

func (d *driver) Type() api.DriverType {
	return Type
}

func init() {
	volume.Register(Name, Init)
}

func (d *driver) Create(
	locator api.VolumeLocator,
	source *api.Source,
	spec *api.VolumeSpec) (api.VolumeID, error) {

	e := struct {
		code string
		retryable string
		description string
		details string
	}{}
	
	s := napping.Session{
		Userinfo: url.UserPassword(APIUser, APIPassword),
		Client: &http.Client{
			Transport: &http.Transport{
				TLSClientConfig: &tls.Config{InsecureSkipVerify : true},
			},
		},
	}

	res := struct {
		user string
	}{}

	p := []string{RESTBaseUrl, "login.json"}

	url := strings.Join(p, "")

	fmt.Printf(url)

	resp, err := s.Get(url, nil, &res, &e)

	if err != nil {
		log.Fatal(err)
	}

	println("")
	if resp.Status() == 200 {
		
		token := resp.HttpResponse().Header.Get("X-SDS-AUTH-TOKEN")

		fmt.Printf("API auth token: %s\n\n", token)

		p = []string{RESTBaseUrl, "block/volumes.json"}

		url = strings.Join(p, "")

		fmt.Printf(url)

		h := http.Header{}

		h.Add("X-SDS-AUTH-TOKEN", token)
		
		s = napping.Session{
			Client: &http.Client{
				Transport: &http.Transport{
					TLSClientConfig: &tls.Config{InsecureSkipVerify : true},
				},
			},
			Header: &h,
		}
		
		payload := struct{
			consistency_group string `json:"consistency_group"`
			count int `json:"count"`
			name string `json:"name"`
			project string `json:"project"`
			size string `json:"size"`
			varray string `json:"varray"`
			vpool string `json:"vpool"`
		} {
			consistency_group: "Default",
			count: 1,
			name: locator.Name,
			project: "Default",
			size: "1GB",
			varray: "Default",
			vpool: "Default",
		}

		resp, err = s.Post(url, &payload, &res, &e)

		if resp.Status() == 200 {
			return api.BadVolumeID, err
		} else {
			fmt.Println("Bad response status from API server")
			fmt.Printf("\t Status:  %v\n", resp.Status())
		}
	} else {
		return api.BadVolumeID, err
	}
	println("")
	
	return api.BadVolumeID, err
}
